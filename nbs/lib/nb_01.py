
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/01_basic_data.ipynb

import operator

def test(a,b, cmp, cname=None):
    if cname is None: cname = cmp.__name__
    assert cmp(a,b), f"{cname}: \n{a} \n{b}"

def test_eq(a,b):
    return test(a,b,operator.eq, '==')

from pathlib import Path
from IPython.core.debugger import set_trace
from fastai import datasets
import pickle, gzip, math, torch, matplotlib as mpl
import matplotlib.pyplot as plt
from torch import tensor

MNIST_URL='http://deeplearning.net/data/mnist/mnist.pkl'

def get_mnist(url = MNIST_URL):
    path = datasets.download_data(url, ext=".gz")
    with gzip.open(path, "rb") as f:
        ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding="latin-1")
    return map(tensor, (x_train, y_train, x_valid, y_valid))

mpl.rcParams['image.cmap'] = 'gray'

def normalize(x, m, s):
    return (x-m)/s

def test_near_zero(a, rtol=1e-3): assert a.abs() < rtol, f"{a} is not Near zero"

class Dataset():
    def __init__(self, x, y): self.x, self.y = x, y
    def __len__(self): return len(self.x)
    def __getitem__(self, idx): return self.x[idx], self.y[idx]

from torch.utils.data import DataLoader, SequentialSampler, RandomSampler

def get_dls(train_ds, valid_ds, bs, **kwargs):
    return (DataLoader(train_ds, batch_size=bs, shuffle=True, **kwargs),
            DataLoader(valid_ds, batch_size=bs*2, **kwargs))